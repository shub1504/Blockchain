This document contains all 6 practical assignments related to Ethereum smart contracts, completed as part of the Blockchain course. Each practical includes a description, smart contract name, a brief explanation, and deployment/testing screenshots.

📋 Table of Contents

Voting System

Student Record Management

Access Control Using Modifiers

Ether Value System (EVS)

Simple Auction

Ether Split Among Beneficiaries

1. 🗳️ Voting System

Contract: election.sol

Description: Implements a simple voting system where voters can cast votes for candidates. Uses mappings to track votes and voters.

Key Functions:

addCandidate(string memory name)

vote(uint candidateId)

getVotes(uint candidateId)

Screenshots:
(Insert screenshots here)

2. 📚 Student Record Management

Contract: record.sol

Description: Stores and retrieves student records using mappings. Allows the admin to assign grades to students.

Key Functions:

setRecord(address student, string memory name, uint marks)

getRecord(address student)

Screenshots:
(Insert screenshots here)

3. 🔐 Access Control Using Modifiers

Contract: access.sol

Description: Demonstrates access control using onlyOwner modifier. Sensitive operations are restricted to the contract deployer.

Key Functions:

addAuthorized(address user)

performRestrictedAction()

Screenshots:
(Insert screenshots here)

4. 💸 Ether Value System (EVS)

Contract: evs.sol

Description: Implements a donation pool where users can deposit Ether. Funds are unlocked when a specific condition is met.

Key Functions:

dropFund()

getPotStatus()

unlockFund()

Screenshots:
(Insert screenshots here)

5. 🧾 Simple Auction

Contract: auction.sol

Description: Users place bids in an auction. The highest bidder wins, and other bidders can withdraw their refunds.

Key Functions:

placeBid()

withdrawRefund()

Screenshots:
(Insert screenshots here)

6. 🤝 Ether Split Among Beneficiaries

Contract: ValueDivider.sol

Description: A deposit function splits incoming Ether equally among three beneficiaries. Handles credit tracking.

Key Functions:

deposit()

withdrawPortion(uint index)

checkBalance(address)

Screenshots:
(Insert screenshots here)

📝 Notes

All contracts were deployed and tested using Remix IDE.

Each practical includes validation logic and error handling.

msg.sender, msg.value, and modifiers were widely used.

